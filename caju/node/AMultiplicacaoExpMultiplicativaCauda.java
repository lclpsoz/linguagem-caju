/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import caju.analysis.*;

@SuppressWarnings("nls")
public final class AMultiplicacaoExpMultiplicativaCauda extends PExpMultiplicativaCauda
{
    private TOpMult _opMult_;
    private PExpUnaria _right_;

    public AMultiplicacaoExpMultiplicativaCauda()
    {
        // Constructor
    }

    public AMultiplicacaoExpMultiplicativaCauda(
        @SuppressWarnings("hiding") TOpMult _opMult_,
        @SuppressWarnings("hiding") PExpUnaria _right_)
    {
        // Constructor
        setOpMult(_opMult_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AMultiplicacaoExpMultiplicativaCauda(
            cloneNode(this._opMult_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiplicacaoExpMultiplicativaCauda(this);
    }

    public TOpMult getOpMult()
    {
        return this._opMult_;
    }

    public void setOpMult(TOpMult node)
    {
        if(this._opMult_ != null)
        {
            this._opMult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opMult_ = node;
    }

    public PExpUnaria getRight()
    {
        return this._right_;
    }

    public void setRight(PExpUnaria node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opMult_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opMult_ == child)
        {
            this._opMult_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opMult_ == oldChild)
        {
            setOpMult((TOpMult) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpUnaria) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
