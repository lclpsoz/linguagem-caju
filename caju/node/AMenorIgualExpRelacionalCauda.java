/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import caju.analysis.*;

@SuppressWarnings("nls")
public final class AMenorIgualExpRelacionalCauda extends PExpRelacionalCauda
{
    private TOpMenorIgual _opMenorIgual_;
    private PExpAditiva _right_;

    public AMenorIgualExpRelacionalCauda()
    {
        // Constructor
    }

    public AMenorIgualExpRelacionalCauda(
        @SuppressWarnings("hiding") TOpMenorIgual _opMenorIgual_,
        @SuppressWarnings("hiding") PExpAditiva _right_)
    {
        // Constructor
        setOpMenorIgual(_opMenorIgual_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AMenorIgualExpRelacionalCauda(
            cloneNode(this._opMenorIgual_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMenorIgualExpRelacionalCauda(this);
    }

    public TOpMenorIgual getOpMenorIgual()
    {
        return this._opMenorIgual_;
    }

    public void setOpMenorIgual(TOpMenorIgual node)
    {
        if(this._opMenorIgual_ != null)
        {
            this._opMenorIgual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opMenorIgual_ = node;
    }

    public PExpAditiva getRight()
    {
        return this._right_;
    }

    public void setRight(PExpAditiva node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opMenorIgual_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opMenorIgual_ == child)
        {
            this._opMenorIgual_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opMenorIgual_ == oldChild)
        {
            setOpMenorIgual((TOpMenorIgual) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpAditiva) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
