/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.node;

import caju.analysis.*;

@SuppressWarnings("nls")
public final class AExpIgualdadeCauda extends PExpIgualdadeCauda
{
    private TOpIgual _opIgual_;
    private PExpRelacional _right_;

    public AExpIgualdadeCauda()
    {
        // Constructor
    }

    public AExpIgualdadeCauda(
        @SuppressWarnings("hiding") TOpIgual _opIgual_,
        @SuppressWarnings("hiding") PExpRelacional _right_)
    {
        // Constructor
        setOpIgual(_opIgual_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AExpIgualdadeCauda(
            cloneNode(this._opIgual_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpIgualdadeCauda(this);
    }

    public TOpIgual getOpIgual()
    {
        return this._opIgual_;
    }

    public void setOpIgual(TOpIgual node)
    {
        if(this._opIgual_ != null)
        {
            this._opIgual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opIgual_ = node;
    }

    public PExpRelacional getRight()
    {
        return this._right_;
    }

    public void setRight(PExpRelacional node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opIgual_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opIgual_ == child)
        {
            this._opIgual_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opIgual_ == oldChild)
        {
            setOpIgual((TOpIgual) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpRelacional) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
