/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import java.util.*;
import caju.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADeclaracoesPrograma(ADeclaracoesPrograma node)
    {
        defaultIn(node);
    }

    public void outADeclaracoesPrograma(ADeclaracoesPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracoesPrograma(ADeclaracoesPrograma node)
    {
        inADeclaracoesPrograma(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaracoesPrograma(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getDecVariavel() != null)
        {
            node.getDecVariavel().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        inAFuncaoDeclaracao(node);
        if(node.getDecFuncao() != null)
        {
            node.getDecFuncao().apply(this);
        }
        outAFuncaoDeclaracao(node);
    }

    public void inADecVariavel(ADecVariavel node)
    {
        defaultIn(node);
    }

    public void outADecVariavel(ADecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavel(ADecVariavel node)
    {
        inADecVariavel(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outADecVariavel(node);
    }

    public void inAListaNomes(AListaNomes node)
    {
        defaultIn(node);
    }

    public void outAListaNomes(AListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomes(AListaNomes node)
    {
        inAListaNomes(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        {
            List<PListaNomesCauda> copy = new ArrayList<PListaNomesCauda>(node.getListaNomesCauda());
            for(PListaNomesCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAListaNomes(node);
    }

    public void inAListaNomesCauda(AListaNomesCauda node)
    {
        defaultIn(node);
    }

    public void outAListaNomesCauda(AListaNomesCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomesCauda(AListaNomesCauda node)
    {
        inAListaNomesCauda(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAListaNomesCauda(node);
    }

    public void inABaseTipo(ABaseTipo node)
    {
        defaultIn(node);
    }

    public void outABaseTipo(ABaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseTipo(ABaseTipo node)
    {
        inABaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outABaseTipo(node);
    }

    public void inAVetorTipo(AVetorTipo node)
    {
        defaultIn(node);
    }

    public void outAVetorTipo(AVetorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorTipo(AVetorTipo node)
    {
        inAVetorTipo(node);
        if(node.getReservadaVetor() != null)
        {
            node.getReservadaVetor().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        {
            List<PVetorDimensoes> copy = new ArrayList<PVetorDimensoes>(node.getVetorDimensoes());
            for(PVetorDimensoes e : copy)
            {
                e.apply(this);
            }
        }
        outAVetorTipo(node);
    }

    public void inANumeroTipoBase(ANumeroTipoBase node)
    {
        defaultIn(node);
    }

    public void outANumeroTipoBase(ANumeroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroTipoBase(ANumeroTipoBase node)
    {
        inANumeroTipoBase(node);
        if(node.getReservadaNumero() != null)
        {
            node.getReservadaNumero().apply(this);
        }
        outANumeroTipoBase(node);
    }

    public void inACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultIn(node);
    }

    public void outACaractereTipoBase(ACaractereTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipoBase(ACaractereTipoBase node)
    {
        inACaractereTipoBase(node);
        if(node.getReservadaCaractere() != null)
        {
            node.getReservadaCaractere().apply(this);
        }
        outACaractereTipoBase(node);
    }

    public void inABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outABooleanoTipoBase(ABooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoTipoBase(ABooleanoTipoBase node)
    {
        inABooleanoTipoBase(node);
        if(node.getReservadaBooleano() != null)
        {
            node.getReservadaBooleano().apply(this);
        }
        outABooleanoTipoBase(node);
    }

    public void inAVetorDimensoes(AVetorDimensoes node)
    {
        defaultIn(node);
    }

    public void outAVetorDimensoes(AVetorDimensoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorDimensoes(AVetorDimensoes node)
    {
        inAVetorDimensoes(node);
        if(node.getAbreColchetes() != null)
        {
            node.getAbreColchetes().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaColchetes() != null)
        {
            node.getFechaColchetes().apply(this);
        }
        outAVetorDimensoes(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getSeta() != null)
        {
            node.getSeta().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetorno(ATipoTipoRetorno node)
    {
        inATipoTipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetorno(node);
    }

    public void inAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioTipoRetorno(AVazioTipoRetorno node)
    {
        inAVazioTipoRetorno(node);
        if(node.getReservadaVazio() != null)
        {
            node.getReservadaVazio().apply(this);
        }
        outAVazioTipoRetorno(node);
    }

    public void inAParametros(AParametros node)
    {
        defaultIn(node);
    }

    public void outAParametros(AParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        inAParametros(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        {
            List<PParametroCauda> copy = new ArrayList<PParametroCauda>(node.getParametroCauda());
            for(PParametroCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAParametros(node);
    }

    public void inAParametroCauda(AParametroCauda node)
    {
        defaultIn(node);
    }

    public void outAParametroCauda(AParametroCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroCauda(AParametroCauda node)
    {
        inAParametroCauda(node);
        if(node.getBarraVertical() != null)
        {
            node.getBarraVertical().apply(this);
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroCauda(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAParametro(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getReservadaInicio() != null)
        {
            node.getReservadaInicio().apply(this);
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReservadaFim() != null)
        {
            node.getReservadaFim().apply(this);
        }
        outABloco(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getReservadaSe() != null)
        {
            node.getReservadaSe().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getThenPart() != null)
        {
            node.getThenPart().apply(this);
        }
        if(node.getElsePart() != null)
        {
            node.getElsePart().apply(this);
        }
        outASeComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getReservadaEnquanto() != null)
        {
            node.getReservadaEnquanto().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComandoSemSenao() != null)
        {
            node.getComandoSemSenao().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getReservadaPara() != null)
        {
            node.getReservadaPara().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getInit() != null)
        {
            node.getInit().apply(this);
        }
        if(node.getCondSep() != null)
        {
            node.getCondSep().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getIncSep() != null)
        {
            node.getIncSep().apply(this);
        }
        if(node.getInc() != null)
        {
            node.getInc().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComandoSemSenao() != null)
        {
            node.getComandoSemSenao().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaCadaComando(AParaCadaComando node)
    {
        defaultIn(node);
    }

    public void outAParaCadaComando(AParaCadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaCadaComando(AParaCadaComando node)
    {
        inAParaCadaComando(node);
        if(node.getReservadaParaCada() != null)
        {
            node.getReservadaParaCada().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getContainer() != null)
        {
            node.getContainer().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getComandoSemSenao() != null)
        {
            node.getComandoSemSenao().apply(this);
        }
        outAParaCadaComando(node);
    }

    public void inASimplesComando(ASimplesComando node)
    {
        defaultIn(node);
    }

    public void outASimplesComando(ASimplesComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesComando(ASimplesComando node)
    {
        inASimplesComando(node);
        if(node.getComandoSimples() != null)
        {
            node.getComandoSimples().apply(this);
        }
        outASimplesComando(node);
    }

    public void inABlocoComandoSemSenao(ABlocoComandoSemSenao node)
    {
        defaultIn(node);
    }

    public void outABlocoComandoSemSenao(ABlocoComandoSemSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandoSemSenao(ABlocoComandoSemSenao node)
    {
        inABlocoComandoSemSenao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComandoSemSenao(node);
    }

    public void inASimplesComandoSemSenao(ASimplesComandoSemSenao node)
    {
        defaultIn(node);
    }

    public void outASimplesComandoSemSenao(ASimplesComandoSemSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesComandoSemSenao(ASimplesComandoSemSenao node)
    {
        inASimplesComandoSemSenao(node);
        if(node.getComandoSimples() != null)
        {
            node.getComandoSimples().apply(this);
        }
        outASimplesComandoSemSenao(node);
    }

    public void inAComandoSenao(AComandoSenao node)
    {
        defaultIn(node);
    }

    public void outAComandoSenao(AComandoSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenao(AComandoSenao node)
    {
        inAComandoSenao(node);
        if(node.getReservadaSenao() != null)
        {
            node.getReservadaSenao().apply(this);
        }
        if(node.getComandoSemSenao() != null)
        {
            node.getComandoSemSenao().apply(this);
        }
        outAComandoSenao(node);
    }

    public void inAAtribuicaoComandoSimples(AAtribuicaoComandoSimples node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComandoSimples(AAtribuicaoComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComandoSimples(AAtribuicaoComandoSimples node)
    {
        inAAtribuicaoComandoSimples(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAAtribuicaoComandoSimples(node);
    }

    public void inARetorneComandoSimples(ARetorneComandoSimples node)
    {
        defaultIn(node);
    }

    public void outARetorneComandoSimples(ARetorneComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetorneComandoSimples(ARetorneComandoSimples node)
    {
        inARetorneComandoSimples(node);
        if(node.getReservadaRetorne() != null)
        {
            node.getReservadaRetorne().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outARetorneComandoSimples(node);
    }

    public void inAChamadaComandoSimples(AChamadaComandoSimples node)
    {
        defaultIn(node);
    }

    public void outAChamadaComandoSimples(AChamadaComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComandoSimples(AChamadaComandoSimples node)
    {
        inAChamadaComandoSimples(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAChamadaComandoSimples(node);
    }

    public void inAExibirComandoSimples(AExibirComandoSimples node)
    {
        defaultIn(node);
    }

    public void outAExibirComandoSimples(AExibirComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExibirComandoSimples(AExibirComandoSimples node)
    {
        inAExibirComandoSimples(node);
        if(node.getReservadaExibir() != null)
        {
            node.getReservadaExibir().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAExibirComandoSimples(node);
    }

    public void inALerComandoSimples(ALerComandoSimples node)
    {
        defaultIn(node);
    }

    public void outALerComandoSimples(ALerComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALerComandoSimples(ALerComandoSimples node)
    {
        inALerComandoSimples(node);
        if(node.getReservadaLer() != null)
        {
            node.getReservadaLer().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getListaVar() != null)
        {
            node.getListaVar().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outALerComandoSimples(node);
    }

    public void inAAtrib(AAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtrib(AAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrib(AAtrib node)
    {
        inAAtrib(node);
        if(node.getAlvo() != null)
        {
            node.getAlvo().apply(this);
        }
        if(node.getOpAtribuicao() != null)
        {
            node.getOpAtribuicao().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAAtrib(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        {
            List<PListaAtribCauda> copy = new ArrayList<PListaAtribCauda>(node.getListaAtribCauda());
            for(PListaAtribCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAListaAtrib(node);
    }

    public void inAListaAtribCauda(AListaAtribCauda node)
    {
        defaultIn(node);
    }

    public void outAListaAtribCauda(AListaAtribCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtribCauda(AListaAtribCauda node)
    {
        inAListaAtribCauda(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAListaAtribCauda(node);
    }

    public void inASimplesVar(ASimplesVar node)
    {
        defaultIn(node);
    }

    public void outASimplesVar(ASimplesVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesVar(ASimplesVar node)
    {
        inASimplesVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        {
            List<PVarIndexada> copy = new ArrayList<PVarIndexada>(node.getVarIndexada());
            for(PVarIndexada e : copy)
            {
                e.apply(this);
            }
        }
        outASimplesVar(node);
    }

    public void inAVarIndexada(AVarIndexada node)
    {
        defaultIn(node);
    }

    public void outAVarIndexada(AVarIndexada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIndexada(AVarIndexada node)
    {
        inAVarIndexada(node);
        if(node.getAbreColchetes() != null)
        {
            node.getAbreColchetes().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaColchetes() != null)
        {
            node.getFechaColchetes().apply(this);
        }
        outAVarIndexada(node);
    }

    public void inAListaVar(AListaVar node)
    {
        defaultIn(node);
    }

    public void outAListaVar(AListaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVar(AListaVar node)
    {
        inAListaVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        {
            List<PListaVarCauda> copy = new ArrayList<PListaVarCauda>(node.getListaVarCauda());
            for(PListaVarCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAListaVar(node);
    }

    public void inAListaVarCauda(AListaVarCauda node)
    {
        defaultIn(node);
    }

    public void outAListaVarCauda(AListaVarCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVarCauda(AListaVarCauda node)
    {
        inAListaVarCauda(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAListaVarCauda(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getExpOu() != null)
        {
            node.getExpOu().apply(this);
        }
        outAExp(node);
    }

    public void inAExpOu(AExpOu node)
    {
        defaultIn(node);
    }

    public void outAExpOu(AExpOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOu(AExpOu node)
    {
        inAExpOu(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        {
            List<PExpOuCauda> copy = new ArrayList<PExpOuCauda>(node.getExpOuCauda());
            for(PExpOuCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAExpOu(node);
    }

    public void inAExpOuCauda(AExpOuCauda node)
    {
        defaultIn(node);
    }

    public void outAExpOuCauda(AExpOuCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOuCauda(AExpOuCauda node)
    {
        inAExpOuCauda(node);
        if(node.getOpOu() != null)
        {
            node.getOpOu().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExpOuCauda(node);
    }

    public void inAExpE(AExpE node)
    {
        defaultIn(node);
    }

    public void outAExpE(AExpE node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpE(AExpE node)
    {
        inAExpE(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        {
            List<PExpECauda> copy = new ArrayList<PExpECauda>(node.getExpECauda());
            for(PExpECauda e : copy)
            {
                e.apply(this);
            }
        }
        outAExpE(node);
    }

    public void inAExpECauda(AExpECauda node)
    {
        defaultIn(node);
    }

    public void outAExpECauda(AExpECauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpECauda(AExpECauda node)
    {
        inAExpECauda(node);
        if(node.getOpE() != null)
        {
            node.getOpE().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExpECauda(node);
    }

    public void inAExpIgualdade(AExpIgualdade node)
    {
        defaultIn(node);
    }

    public void outAExpIgualdade(AExpIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIgualdade(AExpIgualdade node)
    {
        inAExpIgualdade(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        {
            List<PExpIgualdadeCauda> copy = new ArrayList<PExpIgualdadeCauda>(node.getExpIgualdadeCauda());
            for(PExpIgualdadeCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAExpIgualdade(node);
    }

    public void inAExpIgualdadeCauda(AExpIgualdadeCauda node)
    {
        defaultIn(node);
    }

    public void outAExpIgualdadeCauda(AExpIgualdadeCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIgualdadeCauda(AExpIgualdadeCauda node)
    {
        inAExpIgualdadeCauda(node);
        if(node.getOpIgual() != null)
        {
            node.getOpIgual().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExpIgualdadeCauda(node);
    }

    public void inAExpRelacional(AExpRelacional node)
    {
        defaultIn(node);
    }

    public void outAExpRelacional(AExpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpRelacional(AExpRelacional node)
    {
        inAExpRelacional(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        {
            List<PExpRelacionalCauda> copy = new ArrayList<PExpRelacionalCauda>(node.getExpRelacionalCauda());
            for(PExpRelacionalCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAExpRelacional(node);
    }

    public void inAMenorExpRelacionalCauda(AMenorExpRelacionalCauda node)
    {
        defaultIn(node);
    }

    public void outAMenorExpRelacionalCauda(AMenorExpRelacionalCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpRelacionalCauda(AMenorExpRelacionalCauda node)
    {
        inAMenorExpRelacionalCauda(node);
        if(node.getOpMenor() != null)
        {
            node.getOpMenor().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenorExpRelacionalCauda(node);
    }

    public void inAMaiorExpRelacionalCauda(AMaiorExpRelacionalCauda node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpRelacionalCauda(AMaiorExpRelacionalCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpRelacionalCauda(AMaiorExpRelacionalCauda node)
    {
        inAMaiorExpRelacionalCauda(node);
        if(node.getOpMaior() != null)
        {
            node.getOpMaior().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMaiorExpRelacionalCauda(node);
    }

    public void inAMenorIgualExpRelacionalCauda(AMenorIgualExpRelacionalCauda node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExpRelacionalCauda(AMenorIgualExpRelacionalCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExpRelacionalCauda(AMenorIgualExpRelacionalCauda node)
    {
        inAMenorIgualExpRelacionalCauda(node);
        if(node.getOpMenorIgual() != null)
        {
            node.getOpMenorIgual().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenorIgualExpRelacionalCauda(node);
    }

    public void inAMaiorIgualExpRelacionalCauda(AMaiorIgualExpRelacionalCauda node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExpRelacionalCauda(AMaiorIgualExpRelacionalCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExpRelacionalCauda(AMaiorIgualExpRelacionalCauda node)
    {
        inAMaiorIgualExpRelacionalCauda(node);
        if(node.getOpMaiorIgual() != null)
        {
            node.getOpMaiorIgual().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMaiorIgualExpRelacionalCauda(node);
    }

    public void inAExpAditiva(AExpAditiva node)
    {
        defaultIn(node);
    }

    public void outAExpAditiva(AExpAditiva node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAditiva(AExpAditiva node)
    {
        inAExpAditiva(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        {
            List<PExpAditivaCauda> copy = new ArrayList<PExpAditivaCauda>(node.getExpAditivaCauda());
            for(PExpAditivaCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAExpAditiva(node);
    }

    public void inASomaExpAditivaCauda(ASomaExpAditivaCauda node)
    {
        defaultIn(node);
    }

    public void outASomaExpAditivaCauda(ASomaExpAditivaCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpAditivaCauda(ASomaExpAditivaCauda node)
    {
        inASomaExpAditivaCauda(node);
        if(node.getOpMais() != null)
        {
            node.getOpMais().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASomaExpAditivaCauda(node);
    }

    public void inASubtracaoExpAditivaCauda(ASubtracaoExpAditivaCauda node)
    {
        defaultIn(node);
    }

    public void outASubtracaoExpAditivaCauda(ASubtracaoExpAditivaCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoExpAditivaCauda(ASubtracaoExpAditivaCauda node)
    {
        inASubtracaoExpAditivaCauda(node);
        if(node.getOpMenos() != null)
        {
            node.getOpMenos().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubtracaoExpAditivaCauda(node);
    }

    public void inAExpMultiplicativa(AExpMultiplicativa node)
    {
        defaultIn(node);
    }

    public void outAExpMultiplicativa(AExpMultiplicativa node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMultiplicativa(AExpMultiplicativa node)
    {
        inAExpMultiplicativa(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        {
            List<PExpMultiplicativaCauda> copy = new ArrayList<PExpMultiplicativaCauda>(node.getExpMultiplicativaCauda());
            for(PExpMultiplicativaCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAExpMultiplicativa(node);
    }

    public void inAMultiplicacaoExpMultiplicativaCauda(AMultiplicacaoExpMultiplicativaCauda node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoExpMultiplicativaCauda(AMultiplicacaoExpMultiplicativaCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoExpMultiplicativaCauda(AMultiplicacaoExpMultiplicativaCauda node)
    {
        inAMultiplicacaoExpMultiplicativaCauda(node);
        if(node.getOpMult() != null)
        {
            node.getOpMult().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultiplicacaoExpMultiplicativaCauda(node);
    }

    public void inADivisaoExpMultiplicativaCauda(ADivisaoExpMultiplicativaCauda node)
    {
        defaultIn(node);
    }

    public void outADivisaoExpMultiplicativaCauda(ADivisaoExpMultiplicativaCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoExpMultiplicativaCauda(ADivisaoExpMultiplicativaCauda node)
    {
        inADivisaoExpMultiplicativaCauda(node);
        if(node.getOpDiv() != null)
        {
            node.getOpDiv().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivisaoExpMultiplicativaCauda(node);
    }

    public void inANaoExpUnaria(ANaoExpUnaria node)
    {
        defaultIn(node);
    }

    public void outANaoExpUnaria(ANaoExpUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaoExpUnaria(ANaoExpUnaria node)
    {
        inANaoExpUnaria(node);
        if(node.getOpNao() != null)
        {
            node.getOpNao().apply(this);
        }
        if(node.getExpUnaria() != null)
        {
            node.getExpUnaria().apply(this);
        }
        outANaoExpUnaria(node);
    }

    public void inANegativoExpUnaria(ANegativoExpUnaria node)
    {
        defaultIn(node);
    }

    public void outANegativoExpUnaria(ANegativoExpUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExpUnaria(ANegativoExpUnaria node)
    {
        inANegativoExpUnaria(node);
        if(node.getOpMenos() != null)
        {
            node.getOpMenos().apply(this);
        }
        if(node.getExpUnaria() != null)
        {
            node.getExpUnaria().apply(this);
        }
        outANegativoExpUnaria(node);
    }

    public void inAPrimariaExpUnaria(APrimariaExpUnaria node)
    {
        defaultIn(node);
    }

    public void outAPrimariaExpUnaria(APrimariaExpUnaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrimariaExpUnaria(APrimariaExpUnaria node)
    {
        inAPrimariaExpUnaria(node);
        if(node.getExpPrimaria() != null)
        {
            node.getExpPrimaria().apply(this);
        }
        outAPrimariaExpUnaria(node);
    }

    public void inANumeroExpPrimaria(ANumeroExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outANumeroExpPrimaria(ANumeroExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExpPrimaria(ANumeroExpPrimaria node)
    {
        inANumeroExpPrimaria(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroExpPrimaria(node);
    }

    public void inACaractereExpPrimaria(ACaractereExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outACaractereExpPrimaria(ACaractereExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereExpPrimaria(ACaractereExpPrimaria node)
    {
        inACaractereExpPrimaria(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereExpPrimaria(node);
    }

    public void inAStringExpPrimaria(AStringExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outAStringExpPrimaria(AStringExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpPrimaria(AStringExpPrimaria node)
    {
        inAStringExpPrimaria(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringExpPrimaria(node);
    }

    public void inABooleanoExpPrimaria(ABooleanoExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outABooleanoExpPrimaria(ABooleanoExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanoExpPrimaria(ABooleanoExpPrimaria node)
    {
        inABooleanoExpPrimaria(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABooleanoExpPrimaria(node);
    }

    public void inAVarExpPrimaria(AVarExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outAVarExpPrimaria(AVarExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpPrimaria(AVarExpPrimaria node)
    {
        inAVarExpPrimaria(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpPrimaria(node);
    }

    public void inAChamadaExpPrimaria(AChamadaExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outAChamadaExpPrimaria(AChamadaExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExpPrimaria(AChamadaExpPrimaria node)
    {
        inAChamadaExpPrimaria(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaExpPrimaria(node);
    }

    public void inAParentesesExpPrimaria(AParentesesExpPrimaria node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpPrimaria(AParentesesExpPrimaria node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpPrimaria(AParentesesExpPrimaria node)
    {
        inAParentesesExpPrimaria(node);
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAParentesesExpPrimaria(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getFunc() != null)
        {
            node.getFunc().apply(this);
        }
        if(node.getAbreParenteses() != null)
        {
            node.getAbreParenteses().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getFechaParenteses() != null)
        {
            node.getFechaParenteses().apply(this);
        }
        outAChamada(node);
    }

    public void inAListaExp(AListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExp(AListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExp(AListaExp node)
    {
        inAListaExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PListaExpCauda> copy = new ArrayList<PListaExpCauda>(node.getListaExpCauda());
            for(PListaExpCauda e : copy)
            {
                e.apply(this);
            }
        }
        outAListaExp(node);
    }

    public void inAListaExpCauda(AListaExpCauda node)
    {
        defaultIn(node);
    }

    public void outAListaExpCauda(AListaExpCauda node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpCauda(AListaExpCauda node)
    {
        inAListaExpCauda(node);
        if(node.getBarraVertical() != null)
        {
            node.getBarraVertical().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaExpCauda(node);
    }
}
