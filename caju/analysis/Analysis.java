/* This file was generated by SableCC (http://www.sablecc.org/). */

package caju.analysis;

import caju.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADeclaracoesPrograma(ADeclaracoesPrograma node);
    void caseAVariavelDeclaracao(AVariavelDeclaracao node);
    void caseAFuncaoDeclaracao(AFuncaoDeclaracao node);
    void caseADecVariavel(ADecVariavel node);
    void caseAListaNomes(AListaNomes node);
    void caseAListaNomesCauda(AListaNomesCauda node);
    void caseABaseTipo(ABaseTipo node);
    void caseAVetorTipo(AVetorTipo node);
    void caseANumeroTipoBase(ANumeroTipoBase node);
    void caseACaractereTipoBase(ACaractereTipoBase node);
    void caseABooleanoTipoBase(ABooleanoTipoBase node);
    void caseAVetorDimensoes(AVetorDimensoes node);
    void caseADecFuncao(ADecFuncao node);
    void caseATipoTipoRetorno(ATipoTipoRetorno node);
    void caseAVazioTipoRetorno(AVazioTipoRetorno node);
    void caseAParametros(AParametros node);
    void caseAParametroCauda(AParametroCauda node);
    void caseAParametro(AParametro node);
    void caseABloco(ABloco node);
    void caseASeComando(ASeComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAParaComando(AParaComando node);
    void caseAParaCadaComando(AParaCadaComando node);
    void caseASimplesComando(ASimplesComando node);
    void caseABlocoComandoSemSenao(ABlocoComandoSemSenao node);
    void caseASimplesComandoSemSenao(ASimplesComandoSemSenao node);
    void caseAComandoSenao(AComandoSenao node);
    void caseAAtribuicaoComandoSimples(AAtribuicaoComandoSimples node);
    void caseARetorneComandoSimples(ARetorneComandoSimples node);
    void caseAChamadaComandoSimples(AChamadaComandoSimples node);
    void caseAExibirComandoSimples(AExibirComandoSimples node);
    void caseALerComandoSimples(ALerComandoSimples node);
    void caseAAtrib(AAtrib node);
    void caseAListaAtrib(AListaAtrib node);
    void caseAListaAtribCauda(AListaAtribCauda node);
    void caseASimplesVar(ASimplesVar node);
    void caseAVarIndexada(AVarIndexada node);
    void caseAListaVar(AListaVar node);
    void caseAListaVarCauda(AListaVarCauda node);
    void caseAExp(AExp node);
    void caseAExpOu(AExpOu node);
    void caseAExpOuCauda(AExpOuCauda node);
    void caseAExpE(AExpE node);
    void caseAExpECauda(AExpECauda node);
    void caseAExpIgualdade(AExpIgualdade node);
    void caseAExpIgualdadeCauda(AExpIgualdadeCauda node);
    void caseAExpRelacional(AExpRelacional node);
    void caseAMenorExpRelacionalCauda(AMenorExpRelacionalCauda node);
    void caseAMaiorExpRelacionalCauda(AMaiorExpRelacionalCauda node);
    void caseAMenorIgualExpRelacionalCauda(AMenorIgualExpRelacionalCauda node);
    void caseAMaiorIgualExpRelacionalCauda(AMaiorIgualExpRelacionalCauda node);
    void caseAExpAditiva(AExpAditiva node);
    void caseASomaExpAditivaCauda(ASomaExpAditivaCauda node);
    void caseASubtracaoExpAditivaCauda(ASubtracaoExpAditivaCauda node);
    void caseAExpMultiplicativa(AExpMultiplicativa node);
    void caseAMultiplicacaoExpMultiplicativaCauda(AMultiplicacaoExpMultiplicativaCauda node);
    void caseADivisaoExpMultiplicativaCauda(ADivisaoExpMultiplicativaCauda node);
    void caseANaoExpUnaria(ANaoExpUnaria node);
    void caseANegativoExpUnaria(ANegativoExpUnaria node);
    void caseAPrimariaExpUnaria(APrimariaExpUnaria node);
    void caseANumeroExpPrimaria(ANumeroExpPrimaria node);
    void caseACaractereExpPrimaria(ACaractereExpPrimaria node);
    void caseAStringExpPrimaria(AStringExpPrimaria node);
    void caseABooleanoExpPrimaria(ABooleanoExpPrimaria node);
    void caseAVarExpPrimaria(AVarExpPrimaria node);
    void caseAChamadaExpPrimaria(AChamadaExpPrimaria node);
    void caseAParentesesExpPrimaria(AParentesesExpPrimaria node);
    void caseAChamada(AChamada node);
    void caseAListaExp(AListaExp node);
    void caseAListaExpCauda(AListaExpCauda node);

    void caseTReservadaCaractere(TReservadaCaractere node);
    void caseTReservadaBooleano(TReservadaBooleano node);
    void caseTReservadaNumero(TReservadaNumero node);
    void caseTReservadaVetor(TReservadaVetor node);
    void caseTReservadaRetorne(TReservadaRetorne node);
    void caseTReservadaVazio(TReservadaVazio node);
    void caseTReservadaInicio(TReservadaInicio node);
    void caseTReservadaFim(TReservadaFim node);
    void caseTReservadaSe(TReservadaSe node);
    void caseTReservadaSenao(TReservadaSenao node);
    void caseTReservadaEnquanto(TReservadaEnquanto node);
    void caseTReservadaPara(TReservadaPara node);
    void caseTReservadaParaCada(TReservadaParaCada node);
    void caseTReservadaExibir(TReservadaExibir node);
    void caseTReservadaLer(TReservadaLer node);
    void caseTIdentificador(TIdentificador node);
    void caseTCaractere(TCaractere node);
    void caseTString(TString node);
    void caseTBooleano(TBooleano node);
    void caseTNumero(TNumero node);
    void caseTOpMais(TOpMais node);
    void caseTOpMenos(TOpMenos node);
    void caseTOpMult(TOpMult node);
    void caseTOpDiv(TOpDiv node);
    void caseTOpMaior(TOpMaior node);
    void caseTOpMenor(TOpMenor node);
    void caseTOpMaiorIgual(TOpMaiorIgual node);
    void caseTOpMenorIgual(TOpMenorIgual node);
    void caseTOpIgual(TOpIgual node);
    void caseTOpNao(TOpNao node);
    void caseTOpE(TOpE node);
    void caseTOpOu(TOpOu node);
    void caseTOpAtribuicao(TOpAtribuicao node);
    void caseTOpRetornoFuncao(TOpRetornoFuncao node);
    void caseTPonto(TPonto node);
    void caseTVirgula(TVirgula node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTAbreParenteses(TAbreParenteses node);
    void caseTFechaParenteses(TFechaParenteses node);
    void caseTAbreColchetes(TAbreColchetes node);
    void caseTFechaColchetes(TFechaColchetes node);
    void caseTBarraVertical(TBarraVertical node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
