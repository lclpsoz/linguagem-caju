Package caju;

Helpers
 digito = ['0' .. '9'];
 letra = ['a' .. 'z'] | ['A' .. 'Z'];
 underscore = '_';

 aspas_simples = ''';
 aspas_duplas = '"';
 virgula = ',';

 espaco = ' ';
 rc = 13;
 nl = 10;
 tab = 9;

 todos_caracteres = [0..0xffff];
 caractere_simples = [todos_caracteres - [''' + '\']];
 caractere_escape = '\' ('n' | 't' | 'r' | '\' | ''' | '"');

 nao_nl_rc = [todos_caracteres - [10 + 13]];
 nao_chave = [todos_caracteres - ['{' + '}']];
 nao_aspas_duplas = [todos_caracteres - '"'];

 identificador_corpo = letra | digito | underscore;

Tokens
 identificador = letra identificador_corpo*;
 caractere = aspas_simples (caractere_simples | caractere_escape) aspas_simples;
 string = aspas_duplas (nao_aspas_duplas | caractere_escape)* aspas_duplas;
 booleano = 'verdadeiro' | 'falso';
 numero = digito+ (virgula digito+)?;

 reservada_caractere = 'caractere';
 reservada_booleano = 'booleano';
 reservada_numero = 'numero';
 reservada_vetor = 'vetor';
 reservada_retorne = 'retorne';
 reservada_vazio = 'vazio';
 reservada_inicio = 'inicio';
 reservada_fim = 'fim';
 reservada_se = 'se';
 reservada_senao = 'senao';
 reservada_enquanto = 'enquanto';
 reservada_para = 'para';
 reservada_para_cada = 'para cada';
 reservada_exibir = 'exibir';
 reservada_ler = 'ler';

 op_mais = '+';
 op_menos = '-';
 op_mult = '*';
 op_div = '/';
 op_maior = '>';
 op_menor = '<';
 op_maior_igual = '>=';
 op_menor_igual = '<=';
 op_igual = '=';
 op_nao = 'nao';
 op_e = 'e';
 op_ou = 'ou';
 op_atribuicao = ':=';
 op_retorno_funcao = '->';

 ponto = '.';
 virgula = ',';
 dois_pontos = ':';
 ponto_virgula = ';';
 abre_parenteses = '(';
 fecha_parenteses = ')';
 abre_colchetes = '[';
 fecha_colchetes = ']';
 barra_vertical = '|';

 comentario_linha = '#' nao_nl_rc* (nl | rc);
 comentario_bloco = '{' nao_chave* '}';
 vazio = (espaco | rc | nl | tab)+;

Ignored Tokens
  vazio,
  comentario_bloco,
  comentario_linha;

Productions
  programa = {dec_var_func} dec_variavel* dec_funcao*;

  // Declarações de Variáveis
  dec_variavel = tipo lista_nomes ponto;

  lista_nomes = identificador lista_nomes_cauda*;
  lista_nomes_cauda = virgula identificador;

  // Tipos
  tipo = {tipo_base} tipo_base |
         {tipo_vetor} reservada_vetor tipo_base abre_colchetes exp fecha_colchetes vetor_dimensoes*;

  vetor_dimensoes = abre_colchetes exp fecha_colchetes;

  tipo_base = {numero} reservada_numero |
              {caractere} reservada_caractere |
              {booleano} reservada_booleano;

  // Declarações de Funções
  dec_funcao = op_retorno_funcao? tipo_retorno identificador abre_parenteses parametros fecha_parenteses bloco;

  tipo_retorno = {tipo} tipo | {vazio} reservada_vazio;

  // Parâmetros da Função
  parametros = {vazio} | {com_params} parametro parametros_cauda*;
  parametros_cauda = barra_vertical parametro;
  parametro = tipo identificador;

  // Bloco de Código
  bloco = reservada_inicio dec_variavel* comandos reservada_fim;

  comandos = comando*;

  // Comandos
  comando = comando_se |
            comando_enquanto |
            comando_para |
            comando_para_cada |
            comando_atribuicao |
            comando_retorne |
            comando_bloco |
            comando_chamada |
            comando_exibir |
            comando_ler;

  comando_se = reservada_se abre_parenteses exp fecha_parenteses comando comando_senao?;
  comando_senao = reservada_senao comando;

  comando_enquanto = reservada_enquanto abre_parenteses exp fecha_parenteses comando;

  comando_para = reservada_para abre_parenteses lista_atrib ponto_virgula exp ponto_virgula lista_atrib fecha_parenteses comando;

  comando_para_cada = reservada_para_cada abre_parenteses tipo identificador dois_pontos identificador fecha_parenteses comando;

  comando_atribuicao = atrib ponto;

  comando_retorne = reservada_retorne exp? ponto;

  comando_bloco = bloco;

  comando_chamada = chamada ponto;

  comando_exibir = reservada_exibir abre_parenteses lista_exp fecha_parenteses ponto;

  comando_ler = reservada_ler abre_parenteses lista_var fecha_parenteses ponto;

  // Variáveis
  var = {simples} identificador |
        {vetor} var abre_colchetes exp fecha_colchetes;

  // Expressões
  exp = {numero} numero |
        {caractere} caractere |
        {booleano} booleano |
        {var} var |
        {parenteses} abre_parenteses exp fecha_parenteses |
        {chamada} chamada |
        {soma} exp op_mais exp |
        {subtracao} exp op_menos exp |
        {multiplicacao} exp op_mult exp |
        {divisao} exp op_div exp |
        {igual} exp op_igual exp |
        {menor_igual} exp op_menor_igual exp |
        {maior_igual} exp op_maior_igual exp |
        {menor} exp op_menor exp |
        {maior} exp op_maior exp |
        {nao} op_nao exp |
        {e} exp op_e exp |
        {ou} exp op_ou exp;

  // Chamada de Função
  chamada = identificador abre_parenteses lista_exp fecha_parenteses;

  lista_exp = {vazia} | {com_exp} exp lista_exp_cauda*;
  lista_exp_cauda = barra_vertical exp;

  lista_var = {vazia} | {com_var} var lista_var_cauda*;
  lista_var_cauda = virgula var;
