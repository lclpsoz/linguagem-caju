Package caju;

Helpers
    digito = ['0' .. '9'];
    letra = ['a' .. 'z'] | ['A' .. 'Z'];
    underscore = '_';

    aspas_simples = ''';
    aspas_duplas = '"';
    virgula = ',';

    espaco = ' ';
    rc = 13;
    nl = 10;
    tab = 9;

    todos_caracteres = [0..0xffff];
    caractere_simples = [todos_caracteres - [''' + '\']];
    caractere_escape = '\' ('n' | 't' | 'r' | '\' | ''' | '"');

    nao_nl_rc = [todos_caracteres - [10 + 13]];
    nao_chave = [todos_caracteres - ['{' + '}']];
    nao_aspas_duplas = [todos_caracteres - '"'];

    identificador_corpo = letra | digito | underscore;

Tokens
    reservada_caractere = 'caractere';
    reservada_booleano = 'booleano';
    reservada_numero = 'numero';
    reservada_vetor = 'vetor';
    reservada_retorne = 'retorne';
    reservada_vazio = 'vazio';
    reservada_inicio = 'inicio';
    reservada_fim = 'fim';
    reservada_se = 'se';
    reservada_senao = 'senao';
    reservada_enquanto = 'enquanto';
    reservada_para = 'para';
    reservada_para_cada = 'para cada';
    reservada_exibir = 'exibir';
    reservada_ler = 'ler';

    identificador = letra identificador_corpo*;
    caractere = aspas_simples (caractere_simples | caractere_escape) aspas_simples;
    string = aspas_duplas (nao_aspas_duplas | caractere_escape)* aspas_duplas;
    booleano = 'verdadeiro' | 'falso';
    numero = digito+ (virgula digito+)?;

    op_mais = '+';
    op_menos = '-';
    op_mult = '*';
    op_div = '/';
    op_maior = '>';
    op_menor = '<';
    op_maior_igual = '>=';
    op_menor_igual = '<=';
    op_igual = '=';
    op_nao = 'nao';
    op_e = 'e';
    op_ou = 'ou';
    op_atribuicao = ':=';
    op_retorno_funcao = '->';

    ponto = '.';
    virgula = ',';
    dois_pontos = ':';
    ponto_virgula = ';';
    abre_parenteses = '(';
    fecha_parenteses = ')';
    abre_colchetes = '[';
    fecha_colchetes = ']';
    barra_vertical = '|';

    comentario_linha = '#' nao_nl_rc* (nl | rc);
    comentario_bloco = '{' nao_chave* '}';
    vazio = (espaco | rc | nl | tab)+;

Ignored Tokens
    vazio,
    comentario_bloco,
    comentario_linha;

Productions
    programa = {declaracoes} declaracao*;

    declaracao =
        {variavel} dec_variavel |
        {funcao} dec_funcao;

    dec_variavel = tipo lista_nomes ponto;

    lista_nomes = identificador lista_nomes_cauda*;
    lista_nomes_cauda = virgula identificador;

    tipo =
        {base} tipo_base |
        {vetor} reservada_vetor tipo_base vetor_dimensoes+;

    tipo_base =
        {numero} reservada_numero |
        {caractere} reservada_caractere |
        {booleano} reservada_booleano;

    vetor_dimensoes = abre_colchetes exp fecha_colchetes;

    dec_funcao = [seta]:op_retorno_funcao? tipo_retorno identificador
                 abre_parenteses parametros? fecha_parenteses bloco;

    tipo_retorno =
        {tipo} tipo |
        {vazio} reservada_vazio;

    parametros = parametro parametro_cauda*;
    parametro_cauda = barra_vertical parametro;
    parametro = tipo [nome]:identificador;

    bloco = reservada_inicio dec_variavel* comando* reservada_fim;

    comando =
        {se} reservada_se abre_parenteses exp fecha_parenteses [then_part]:comando_sem_senao [else_part]:comando_senao? |
        {enquanto} reservada_enquanto abre_parenteses exp fecha_parenteses comando_sem_senao |
        {para} reservada_para abre_parenteses [init]:lista_atrib [cond_sep]:ponto_virgula [cond]:exp [inc_sep]:ponto_virgula [inc]:lista_atrib fecha_parenteses comando_sem_senao |
        {para_cada} reservada_para_cada abre_parenteses tipo [var]:identificador dois_pontos [container]:identificador fecha_parenteses comando_sem_senao |
        {simples} comando_simples;

    comando_sem_senao =
        {bloco} bloco |
        {simples} comando_simples;

    comando_senao = reservada_senao comando_sem_senao;

    comando_simples =
        {atribuicao} atrib ponto |
        {retorne} reservada_retorne [valor]:exp? ponto |
        {chamada} chamada ponto |
        {exibir} reservada_exibir abre_parenteses lista_exp? fecha_parenteses ponto |
        {ler} reservada_ler abre_parenteses lista_var fecha_parenteses ponto;

    atrib = [alvo]:var op_atribuicao [valor]:exp;

    lista_atrib = atrib lista_atrib_cauda*;
    lista_atrib_cauda = virgula atrib;

    var =
        {simples} identificador var_indexada*;

    var_indexada = abre_colchetes exp fecha_colchetes;

    lista_var = var lista_var_cauda*;
    lista_var_cauda = virgula var;

    exp = exp_ou;

    exp_ou = [left]:exp_e exp_ou_cauda*;
    exp_ou_cauda = op_ou [right]:exp_e;

    exp_e = [left]:exp_igualdade exp_e_cauda*;
    exp_e_cauda = op_e [right]:exp_igualdade;

    exp_igualdade = [left]:exp_relacional exp_igualdade_cauda*;
    exp_igualdade_cauda = op_igual [right]:exp_relacional;

    exp_relacional = [left]:exp_aditiva exp_relacional_cauda*;
    exp_relacional_cauda =
        {menor} op_menor [right]:exp_aditiva |
        {maior} op_maior [right]:exp_aditiva |
        {menor_igual} op_menor_igual [right]:exp_aditiva |
        {maior_igual} op_maior_igual [right]:exp_aditiva;

    exp_aditiva = [left]:exp_multiplicativa exp_aditiva_cauda*;
    exp_aditiva_cauda =
        {soma} op_mais [right]:exp_multiplicativa |
        {subtracao} op_menos [right]:exp_multiplicativa;

    exp_multiplicativa = [left]:exp_unaria exp_multiplicativa_cauda*;
    exp_multiplicativa_cauda =
        {multiplicacao} op_mult [right]:exp_unaria |
        {divisao} op_div [right]:exp_unaria;

    exp_unaria =
        {nao} op_nao exp_unaria |
        {negativo} op_menos exp_unaria |
        {primaria} exp_primaria;

    exp_primaria =
        {numero} numero |
        {caractere} caractere |
        {string} string |
        {booleano} booleano |
        {var} var |
        {chamada} chamada |
        {parenteses} abre_parenteses exp fecha_parenteses;

    chamada = [func]:identificador abre_parenteses lista_exp? fecha_parenteses;

    lista_exp = exp lista_exp_cauda*;
    lista_exp_cauda = barra_vertical exp;
